{"version":3,"sources":["node_modules/sammy/lib/plugins/sammy.handlebars.js"],"names":[],"mappingsfile":"sammy.handlebars.f938e5e0.js","sourceRoot":"..","sourcesContent":["(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['jquery', 'sammy', 'handlebars'], factory);\n  } else {\n    (window.Sammy = window.Sammy || {}).Handlebars = factory(window.jQuery, window.Sammy);\n  }\n}(function ($, Sammy, Handlebars) {\n    // version 1.0.0 has no support for AMD but upwards does, this way we support both.\n    Handlebars = Handlebars || window.Handlebars;\n\n    // <tt>Sammy.Handlebars</tt> provides a quick way of using Handlebars templates in your app.\n    //\n    // Note: As of Sammy 0.7 Handlebars itself is not included in the source. Please download and\n    // include handlebars.js before Sammy.Handlebars.\n    //\n    // Handlebars.js is an extension to the Mustache templating language created by Chris Wanstrath. Handlebars.js\n    // and Mustache are both logicless templating languages that keep the view and the code separated like\n    // we all know they should be.\n    //\n    // By default using Sammy.Handlbars in your app adds the <tt>handlebars()</tt> method to the EventContext\n    // prototype. However, just like <tt>Sammy.Template</tt> you can change the default name of the method\n    // by passing a second argument (e.g. you could use the hbr() as the method alias so that all the template\n    // files could be in the form file.hbr instead of file.handlebars)\n    //\n    // ### Example #1\n    //\n    // The template (mytemplate.hb):\n    //\n    //       <h1>{{title}}<h1>\n    //\n    //       Hey, {{name}}! Welcome to Handlebars!\n    //\n    // The app:\n    //\n    //       var app = $.sammy(function() {\n    //         // include the plugin and alias handlebars() to hb()\n    //         this.use('Handlebars', 'hb');\n    //\n    //         this.get('#/hello/:name', function() {\n    //           // set local vars\n    //           this.title = 'Hello!'\n    //           this.name = this.params.name;\n    //           // render the template and pass it through handlebars\n    //           this.partial('mytemplate.hb');\n    //         });\n    //       });\n    //\n    //       $(function() {\n    //         app.run()\n    //       });\n    //\n    // If I go to #/hello/AQ in the browser, Sammy will render this to the <tt>body</tt>:\n    //\n    //       <h1>Hello!</h1>\n    //\n    //       Hey, AQ! Welcome to Handlebars!\n    //\n    //\n    // ### Example #2 - Handlebars partials\n    //\n    // The template (mytemplate.hb)\n    //\n    //       Hey, {{name}}! {{>hello_friend}}\n    //\n    //\n    // The partial (mypartial.hb)\n    //\n    //       Say hello to your friend {{friend}}!\n    //\n    // The app:\n    //\n    //       var app = $.sammy(function() {\n    //         // include the plugin and alias handlebars() to hb()\n    //         this.use('Handlebars', 'hb');\n    //\n    //         this.get('#/hello/:name/to/:friend', function(context) {\n    //           // fetch handlebars-partial first\n    //           this.load('mypartial.hb')\n    //               .then(function(partial) {\n    //                 // set local vars\n    //                 context.partials = {hello_friend: partial};\n    //                 context.name = context.params.name;\n    //                 context.friend = context.params.friend;\n    //\n    //                 // render the template and pass it through handlebars\n    //                 context.partial('mytemplate.hb');\n    //               });\n    //         });\n    //       });\n    //\n    //       $(function() {\n    //         app.run()\n    //       });\n    //\n    // If I go to #/hello/AQ/to/dP in the browser, Sammy will render this to the <tt>body</tt>:\n    //\n    //       Hey, AQ! Say hello to your friend dP!\n    //\n    // Note: You dont have to include the handlebars.js file on top of the plugin as the plugin\n    // includes the full source.\n    //\n    Sammy.Handlebars = function(app, method_alias) {\n      var handlebars_cache = {};\n      // *Helper* Uses handlebars.js to parse a template and interpolate and work with the passed data\n      //\n      // ### Arguments\n      //\n      // * `template` A String template.\n      // * `data` An Object containing the replacement values for the template.\n      //   data is extended with the <tt>EventContext</tt> allowing you to call its methods within the template.\n      //\n      var handlebars = function(template, data, partials, name) {\n          // use name for caching\n          if (typeof name == 'undefined')  { name = template; }\n          var fn = handlebars_cache[name];\n          if (!fn) {\n              fn = handlebars_cache[name] = Handlebars.compile(template);\n          }\n\n          data     = $.extend({}, this, data);\n          partials = $.extend({}, data.partials, partials);\n\n          return fn(data, {\"partials\":partials});\n      };\n\n      // set the default method name/extension\n      if (!method_alias) { method_alias = 'handlebars'; }\n      app.helper(method_alias, handlebars);\n    };\n\n  return Sammy.Handlebars;\n\n}));\n"]}